{{ if eq .GOOS "linux" -}}
{{ if .Reference -}}
# The auditd module collects events from the audit framework in the Linux
# kernel. You need to specify audit rules for the events that you want to audit.
{{ end -}}
- module: auditd
  {{ if .Reference -}}
  resolve_ids: true
  failure_mode: silent
  backlog_limit: 8196
  rate_limit: 0
  include_raw_message: false
  include_warnings: false

  # Set to true to publish fields with null values in events.
  #keep_null: false

  {{ end -}}
  # Load audit rules from separate files. Same format as audit.rules(7).
  audit_rule_files: [ '${path.config}/audit.rules.d/*.conf' ]
  audit_rules: |
    ## Define audit rules here.
    ## Create file watches (-w) or syscall audits (-a or -A). Uncomment these
    ## examples or add your own rules.

    {{ if eq .GOARCH "amd64" -}}
    ## If you are on a 64 bit platform, everything should be running
    ## in 64 bit mode. This rule will detect any use of the 32 bit syscalls
    ## because this might be a sign of someone exploiting a hole in the 32
    ## bit API.
    #-a always,exit -F arch=b32 -S all -F key=32bit-abi

    {{ end -}}
    ## Executions.
    #-a always,exit -F arch=b{{call .ArchBits .GOARCH}} -S execve,execveat -k exec

    ## External access (warning: these can be expensive to audit).
    #-a always,exit -F arch=b{{call .ArchBits .GOARCH}} -S accept,bind,connect -F key=external-access

    ## Identity changes.
    #-w /etc/group -p wa -k identity
    #-w /etc/passwd -p wa -k identity
    #-w /etc/gshadow -p wa -k identity

    ## Unauthorized access attempts.
    #-a always,exit -F arch=b{{call .ArchBits .GOARCH}} -S open,creat,truncate,ftruncate,openat,open_by_handle_at -F exit=-EACCES -k access
    #-a always,exit -F arch=b{{call .ArchBits .GOARCH}} -S open,creat,truncate,ftruncate,openat,open_by_handle_at -F exit=-EPERM -k access

{{ end }}
{{- if .Reference -}}
# The file integrity module sends events when files are changed (created,
# updated, deleted). The events contain file metadata and hashes.
{{ end -}}
- module: file_integrity
  {{- if eq .GOOS "darwin" }}
  paths:
  - /bin
  - /usr/bin
  - /usr/local/bin
  - /sbin
  - /usr/sbin
  - /usr/local/sbin
{{ else if eq .GOOS "windows" }}
  paths:
  - C:/windows
  - C:/windows/system32
  - C:/Program Files
  - C:/Program Files (x86)
{{ else }}
  paths:
  - /bin
  - /usr/bin
  - /sbin
  - /usr/sbin
  - /etc
{{ end -}}

{{- if .Reference }}
  # List of regular expressions to filter out notifications for unwanted files.
  # Wrap in single quotes to workaround YAML escaping rules. By default no files
  # are ignored.
  {{- if eq .GOOS "darwin" }}
  exclude_files:
  - '\.DS_Store$'
  - '\.swp$'
  {{- else if eq .GOOS "windows" }}
  exclude_files:
  - '(?i)\.lnk$'
  - '(?i)\.swp$'
  {{- else }}
  exclude_files:
  - '(?i)\.sw[nop]$'
  - '~$'
  - '/\.git($|/)'
  {{- end }}

  # List of regular expressions used to explicitly include files. When configured,
  # Auditbeat will ignore files unless they match a pattern.
  {{- if eq .GOOS "windows" }}
  #include_files:
  #- '\\\.ssh($|\\)'
  {{- else }}
  #include_files:
  #- '/\.ssh($|/)'
  {{- end }}

  # Scan over the configured file paths at startup and send events for new or
  # modified files since the last time Auditbeat was running.
  scan_at_start: true

  # Average scan rate. This throttles the amount of CPU and I/O that Auditbeat
  # consumes at startup while scanning. Default is "50 MiB".
  scan_rate_per_sec: 50 MiB

  # Limit on the size of files that will be hashed. Default is "100 MiB".
  # Limit on the size of files that will be hashed. Default is "100 MiB".
  max_file_size: 100 MiB

  # Hash types to compute when the file changes. Supported types are
  # blake2b_256, blake2b_384, blake2b_512, md5, sha1, sha224, sha256, sha384,
  # sha512, sha512_224, sha512_256, sha3_224, sha3_256, sha3_384, sha3_512, and xxh64.
  # Default is sha1.
  hash_types: [sha1]

  # Detect changes to files included in subdirectories. Disabled by default.
  recursive: false

  # Set to true to publish fields with null values in events.
  #keep_null: false
{{ end }}
{{ if .Reference -}}
# The system module collects security related information about a host.
# All datasets send both periodic state information (e.g. all currently
# running processes) and real-time changes (e.g. when a new process starts
# or stops).
{{ end -}}

{{- if ne .GOOS "windows" -}}
- module: system
  datasets:
    - package # Installed, updated, and removed packages

  period: 2m # The frequency at which the datasets check for changes
{{- end }}

- module: system
  datasets:
    - host    # General host information, e.g. uptime, IPs
    {{- if eq .GOOS "linux" }}
    - login   # User logins, logouts, and system boots.
    {{- end }}
    - process # Started and stopped processes
    {{- if and (eq .GOOS "linux") (or (eq .GOARCH "amd64") (eq .GOARCH "386")) }}
    - socket  # Opened and closed sockets
    {{- end }}
    {{- if eq .GOOS "linux" }}
    - user    # User information
    {{- end }}

  # How often datasets send state updates with the
  # current state of the system (e.g. all currently
  # running processes, all open sockets).
  state.period: 12h

{{- if .Reference }}

  # The state.period can be overridden for any dataset.
  # host.state.period: 12h
  {{- if ne .GOOS "windows" }}
  # package.state.period: 12h
  {{- end }}
  # process.state.period: 12h
  {{- if eq .GOOS "linux" }}
  # socket.state.period: 12h
  # user.state.period: 12h
  {{- end }}

  # Average file read rate for hashing of the process executable. Default is "50 MiB".
  process.hash.scan_rate_per_sec: 50 MiB

  # Limit on the size of the process executable that will be hashed. Default is "100 MiB".
  process.hash.max_file_size: 100 MiB

  # Hash types to compute of the process executable. Supported types are
  # blake2b_256, blake2b_384, blake2b_512, md5, sha1, sha224, sha256, sha384,
  # sha512, sha512_224, sha512_256, sha3_224, sha3_256, sha3_384, sha3_512, and xxh64.
  # Default is sha1.
  process.hash.hash_types: [sha1]
{{- end -}}
{{- if eq .GOOS "linux" -}}

{{- if .Reference }}

  # Disabled by default. If enabled, the socket dataset will
  # report sockets to and from localhost.
  # socket.include_localhost: false
{{- end }}

  # Enabled by default. Auditbeat will read password fields in
  # /etc/passwd and /etc/shadow and store a hash locally to
  # detect any changes.
  user.detect_password_changes: true

  # File patterns of the login record files.
{{- if .Reference }}
  # wtmp: History of successful logins, logouts, and system shutdowns and boots.
  # btmp: Failed login attempts.
{{- end }}
  login.wtmp_file_pattern: /var/log/wtmp*
  login.btmp_file_pattern: /var/log/btmp*
  {{- end }}
